aspect Optimization {

//  Constant values are rewritten to the constant value
    syn boolean Exp.isConstantSubtree() = false;
    eq BinExp.isConstantSubtree() = getA().isConstantSubtree() && getB().isConstantSubtree();
    eq UnExp.isConstantSubtree() = getA().isConstantSubtree();
    eq Number.isConstantSubtree() = true;

   rewrite Exp {
       when ((this.getClass() != Number.class) && isConstantSubtree())
         to Number {
            return new Number(eval());
         }
   }

// Multiplications with zero = 0,
   syn boolean  MulExp.isMulWithZero() = (getA().eval() == 0f) || (getB().eval() == 0f);

   rewrite MulExp {
     when ( isMulWithZero() )
     to Number {
       return new Number(0f);
     }
   }

}